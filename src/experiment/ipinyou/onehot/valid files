result__2 - contains agge bins=10 and oh for '2259', '3476'

    experiments = generate_space([
        # advertiser ids
        # ['1458', '3358', '3386', '3427', '3476', '2259', '2261', '2821', '2997'],
        ['2259', '3476'],
        # dims
        # [50, 300],  # 15, 50, 150, 300
        # alpha
        [0.000001, 0.0001, 0.01],
        # hidden
        [4, 32],
        # re-runs
        list(range(15)),
    ],

            nn_params = {
            "hidden_layer_sizes": hidden_sizes,
            # "activation":"relu",
            # "solver":'adam',
            "alpha": alpha,  # 0.000001,
            "batch_size": 1000,
            # "learning_rate": "constant",
            "learning_rate_init": 0.001,
            # "power_t": 0.5,
            "max_iter": 100,  # implement
            # "shuffle": True, # always true
            "validation_fraction": 0.1,  # implement
            # "random_state":None,
            "tol": 1e-4,  # implement OR make sure its low
            # "warm_start": False,
            # "momentum": 0.9,
            # "nesterovs_momentum": True,
            # "early_stopping": True,  # should be always true
            # "beta_1": 0.9, "beta_2": 0.999,
            # "epsilon": 1e-8, "n_iter_no_change": 10, "max_fun": 15000
            "n_iter_no_change": 10
        }

result__3

    experiments = generate_space([
        # advertiser ids
        # ['1458', '3358', '3386', '3427', '3476', '2259', '2261', '2821', '2997'],
        ['2261', '2821', '2997'],
        # dims
        # [50, 300],  # 15, 50, 150, 300
        # alpha
        [0.000001, 0.0001, 0.01],
        # hidden
        [4, 32],
        # re-runs
        list(range(15)),
    ],
        >>>>>> bins = 110
        nn_params = {
            "hidden_layer_sizes": hidden_sizes,
            # "activation":"relu",
            # "solver":'adam',
            "alpha": alpha,  # 0.000001,
            "batch_size": 1000,
            # "learning_rate": "constant",
            "learning_rate_init": 0.001,
            # "power_t": 0.5,
            "max_iter": 100,  # implement
            # "shuffle": True, # always true
            "validation_fraction": 0.1,  # implement
            # "random_state":None,
            "tol": 1e-4,  # implement OR make sure its low
            # "warm_start": False,
            # "momentum": 0.9,
            # "nesterovs_momentum": True,
            # "early_stopping": True,  # should be always true
            # "beta_1": 0.9, "beta_2": 0.999,
            # "epsilon": 1e-8, "n_iter_no_change": 10, "max_fun": 15000
            "n_iter_no_change": 10
        }